/**
* Hypto IAM
* APIs for Hypto IAM Service.
*
* The version of the OpenAPI document: 1.0.0
* Contact: engineering@hypto.in
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.hypto.iam

import io.ktor.locations.*
import org.hypto.iam.models.*

@KtorExperimentalLocationsAPI
object Paths {
    /**
     * Create an action
     * Create an action
     * @param resourceId  
     * @param UNKNOWN_BASE_TYPE Payload to create action 
     */
    @Location("/resources/{resource_id}/action") class createAction(val resourceId: kotlin.String, val UNKNOWN_BASE_TYPE: UNKNOWN_BASE_TYPE)

    /**
     * Delete an action
     * Delete an action
     * @param resourceId  
     * @param id  
     */
    @Location("/resources/{resource_id}/action/{id}") class deleteAction(val resourceId: kotlin.String, val id: kotlin.String)

    /**
     * Get an action
     * Get an action
     * @param resourceId  
     * @param id  
     */
    @Location("/resources/{resource_id}/action/{id}") class getAction(val resourceId: kotlin.String, val id: kotlin.String)

    /**
     * Update an action
     * Update an action
     * @param resourceId  
     * @param id  
     * @param UNKNOWN_BASE_TYPE Payload to update action 
     */
    @Location("/resources/{resource_id}/action/{id}") class updateAction(val resourceId: kotlin.String, val id: kotlin.String, val UNKNOWN_BASE_TYPE: UNKNOWN_BASE_TYPE)

    /**
     * Create a Credential
     * Create a Credential
     * @param userId  
     * @param id  
     * @param UNKNOWN_BASE_TYPE Payload to create credential 
     */
    @Location("/users/{user_id}/credential") class createCredential(val userId: kotlin.String, val id: kotlin.String, val UNKNOWN_BASE_TYPE: UNKNOWN_BASE_TYPE)

    /**
     * Delete a credential
     * Delete a credential
     * @param userId  
     * @param id  
     */
    @Location("/users/{user_id}/credential/{id}") class deleteCredential(val userId: kotlin.String, val id: kotlin.String)

    /**
     * Get a credential
     * Get a credential
     * @param userId  
     * @param id  
     */
    @Location("/users/{user_id}/credential/{id}") class getCredential(val userId: kotlin.String, val id: kotlin.String)

    /**
     * Update a credential
     * Update a credential
     * @param userId  
     * @param id  
     * @param UNKNOWN_BASE_TYPE Payload to update credential 
     */
    @Location("/users/{user_id}/credential/{id}") class updateCredential(val userId: kotlin.String, val id: kotlin.String, val UNKNOWN_BASE_TYPE: UNKNOWN_BASE_TYPE)

    /**
     * Create an organization
     * Create an organization
     * @param UNKNOWN_BASE_TYPE Payload to create organization 
     */
    @Location("/organizations") class createOrganization(val UNKNOWN_BASE_TYPE: UNKNOWN_BASE_TYPE)

    /**
     * Delete an organization
     * Delete an organization
     * @param id  
     */
    @Location("/organization/{id}") class deleteOrganization(val id: kotlin.String)

    /**
     * Get an organization
     * Get an organization
     * @param id  
     */
    @Location("/organization/{id}") class getOrganization(val id: kotlin.String)

    /**
     * Update an organization
     * Update an organization
     * @param id  
     * @param UNKNOWN_BASE_TYPE Payload to update organization 
     */
    @Location("/organization/{id}") class updateOrganization(val id: kotlin.String, val UNKNOWN_BASE_TYPE: UNKNOWN_BASE_TYPE)

    /**
     * Create a policy
     * Create a policy
     * @param id  
     * @param UNKNOWN_BASE_TYPE Payload to create policy 
     */
    @Location("/policies") class createPolicy(val id: kotlin.String, val UNKNOWN_BASE_TYPE: UNKNOWN_BASE_TYPE)

    /**
     * Delete a policy
     * Delete a policy
     * @param id  
     */
    @Location("/policies/{id}") class deletePolicy(val id: kotlin.String)

    /**
     * Get a policy
     * Get a policy
     * @param id  
     */
    @Location("/policies/{id}") class getPolicy(val id: kotlin.String)

    /**
     * Get policies of a user
     * Get policies of a user
     * @param id  
     */
    @Location("/users/{id}/policies") class getUserPolicies(val id: kotlin.String)

    /**
     * Update a policy
     * Update a policy
     * @param id  
     * @param UNKNOWN_BASE_TYPE Payload to update policy 
     */
    @Location("/policies/{id}") class updatePolicy(val id: kotlin.String, val UNKNOWN_BASE_TYPE: UNKNOWN_BASE_TYPE)

    /**
     * Create a resource type
     * Create a resource type
     * @param id  
     * @param UNKNOWN_BASE_TYPE Payload to create resource 
     */
    @Location("/resource_types") class createResourceType(val id: kotlin.String, val UNKNOWN_BASE_TYPE: UNKNOWN_BASE_TYPE)

    /**
     * Delete a resource type
     * Delete a resource type
     * @param id  
     */
    @Location("/resource_types/{id}") class deleteResourceType(val id: kotlin.String)

    /**
     * Get a resource type
     * Get a resource type
     * @param id  
     */
    @Location("/resource_types/{id}") class getResourceType(val id: kotlin.String)

    /**
     * Update a resource type
     * Update a resource type
     * @param id  
     * @param UNKNOWN_BASE_TYPE Payload to update resource 
     */
    @Location("/resource_types/{id}") class updateResourceType(val id: kotlin.String, val UNKNOWN_BASE_TYPE: UNKNOWN_BASE_TYPE)

    /**
     * Generate a token
     * Generate a token
     * @param id  
     */
    @Location("/token") class getToken(val id: kotlin.String)

    /**
     * Attach policies to user
     * Attach policies to user
     * @param id  
     * @param UNKNOWN_BASE_TYPE Payload to attach / detach a policy to a user / resource 
     */
    @Location("/users/{id}/attach_policies") class attachPolicies(val id: kotlin.String, val UNKNOWN_BASE_TYPE: UNKNOWN_BASE_TYPE)

    /**
     * Create a user
     * Create a user
     * @param UNKNOWN_BASE_TYPE Payload to create user 
     */
    @Location("/users") class createUser(val UNKNOWN_BASE_TYPE: UNKNOWN_BASE_TYPE)

    /**
     * Delete a User
     * Delete a User
     * @param id  
     */
    @Location("/users/{id}") class deleteUser(val id: kotlin.String)

    /**
     * Detach policies to user
     * Detach policies to user
     * @param id  
     * @param UNKNOWN_BASE_TYPE Payload to attach / detach a policy to a user / resource 
     */
    @Location("/users/{id}/detach_policies") class detachPolicies(val id: kotlin.String, val UNKNOWN_BASE_TYPE: UNKNOWN_BASE_TYPE)

    /**
     * Get a User
     * Get a User
     * @param id  
     */
    @Location("/users/{id}") class getUser(val id: kotlin.String)

    /**
     * Update a User
     * Update a User
     * @param id  
     */
    @Location("/users/{id}") class updateUser(val id: kotlin.String)

}
