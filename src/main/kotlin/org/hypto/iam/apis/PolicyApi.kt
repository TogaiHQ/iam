/**
* Hypto IAM
* APIs for Hypto IAM Service.
*
* The version of the OpenAPI document: 1.0.0
* Contact: engineering@hypto.in
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.hypto.iam.apis

import com.google.gson.Gson
import io.ktor.application.*
import io.ktor.auth.*
import io.ktor.http.*
import io.ktor.response.*
import org.hypto.iam.Paths
import io.ktor.locations.*
import io.ktor.routing.*
import org.hypto.iam.infrastructure.ApiPrincipal
import org.hypto.iam.models.ErrorResponse
import org.hypto.iam.models.InlineResponse200
import org.hypto.iam.models.Policy
import org.hypto.iam.models.UNKNOWN_BASE_TYPE

@KtorExperimentalLocationsAPI
fun Route.PolicyApi() {
    val gson = Gson()
    val empty = mutableMapOf<String, Any?>()

    authenticate("access_token") {
    post<Paths.createPolicy> {
        val principal = call.authentication.principal<UserIdPrincipal>()!!
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "name" : "name",
              "statements" : [ "{}", "{}", "{}", "{}", "{}" ],
              "id" : "3fa85f64-5717-4562-b3fc-2c963f66afa6",
              "version" : "version"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
    }
    }

    authenticate("access_token") {
    delete<Paths.deletePolicy> {
        val principal = call.authentication.principal<UserIdPrincipal>()!!
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "success" : true
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
    }
    }

    authenticate("access_token") {
    get<Paths.getPolicy> {
        val principal = call.authentication.principal<UserIdPrincipal>()!!
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "name" : "name",
              "statements" : [ "{}", "{}", "{}", "{}", "{}" ],
              "id" : "3fa85f64-5717-4562-b3fc-2c963f66afa6",
              "version" : "version"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
    }
    }

    authenticate("access_token") {
    get<Paths.getUserPolicies> {
        val principal = call.authentication.principal<UserIdPrincipal>()!!
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "name" : "name",
              "statements" : [ "{}", "{}", "{}", "{}", "{}" ],
              "id" : "3fa85f64-5717-4562-b3fc-2c963f66afa6",
              "version" : "version"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
    }
    }

    authenticate("access_token") {
    patch<Paths.updatePolicy> {
        val principal = call.authentication.principal<UserIdPrincipal>()!!
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "name" : "name",
              "statements" : [ "{}", "{}", "{}", "{}", "{}" ],
              "id" : "3fa85f64-5717-4562-b3fc-2c963f66afa6",
              "version" : "version"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
    }
    }

}
